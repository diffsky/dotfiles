# Copy ssh keys to another host
# Usage: copykeys example.com [diffsky] [port]
function copykeys {
    username=$2
    port=$3
    ssh -p${port:=22} ${username:=$USER}@${1} "mkdir -p ~/.ssh;echo `cat ~/.ssh/id_rsa.pub` >> ~/.ssh/authorized_keys"
}

function parseGitDirty {
  [[ "$(git status 2> /dev/null | tail -n1 | cut -c 1-17)" != "nothing to commit" ]] && echo "*"
}

# Get the git branch name of current directory and wrap in parens if exists (for PS1)
function parseGitBranch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1$(parseGitDirty))/"
}

# echo git branch of current directory
function getGitBranch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# git push origin branch
function gpob {
  git push origin $(getGitBranch)
}

# git pull origin branch
function glob {
  git pull origin $(getGitBranch)
}

# rebase remote
function glr {
  git fetch origin && git rebase --preserve-merges origin/$(getGitBranch)
}

# Determine the active python virtualenv
# to add to PS1 use \$(parseVirtualEnv)
function parseVirtualEnv {
    if [ "$VIRTUAL_ENV" != "" ];then
        local ENV=`basename $VIRTUAL_ENV`
        echo " [$ENV]"
    fi
}

# Repeat a command mulitple times
function repeat() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}

# Update and source .dotfiles
function dotfiles() {
  if [ "$1" == "remote" ];then
    echo "attempting to merge from remote origin..."
    cd $HOME/.dotfiles
    git fetch origin
    git merge origin/master
  elif [ "$1" == "init" ];then
    $HOME/.dotfiles/init.sh
  fi
  source $HOME/.dotfiles/dotfiles/bashrc
  echo "sourced .dotfiles"
}

# cd to parent directory of symlinked file
function cds() {
  realpath=$(readlink $1)
  cd $(dirname $realpath)
}

# make a directory and cd into it
function md () {
  mkdir -p "$@" && cd "$@";
}